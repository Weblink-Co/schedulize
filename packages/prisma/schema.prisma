// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Providers {
  GOOGLE
  EMAIL
  SMS
}

enum PeriodType {
  UNLIMITED
  RANGE
}

enum BookingStatus {
  CANCELED
  ACCEPTED
  REJECTED
  PENDING
}

model EventType {
  id                  Int            @id @default(autoincrement())
  title               String
  slug                String
  description         String
  position            Int            @default(1)
  locations           Json
  hidden              Boolean        @default(false)
  timezone            String?
  periodType          PeriodType
  periodStartDate     DateTime?
  periodEndDate       DateTime?
  requireConfirmation Boolean        @default(true)
  disableGuests       Boolean        @default(false)
  price               Int            @default(0)
  metadata            Json?
  bookingLimits       Json?
  durationLimits      Json?
  beforeBuffer        Int            @default(0)
  afterBuffer         Int            @default(0)
  userId              String?
  parentId            Int?
  owner               User?          @relation("owner", fields: [userId], references: [id], onDelete: Cascade)
  parent              EventType?     @relation("managed_eventtype", fields: [parentId], references: [id], onDelete: Cascade)
  children            EventType[]    @relation("managed_eventtype")
  availability        Availability[]
  bookings            Booking[]

  @@unique([userId, slug])
  @@unique([userId, parentId])
  @@index([userId])
}

model Availability {
  id          Int        @id @default(autoincrement())
  userId      String?
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  ventType    EventType? @relation(fields: [eventTypeId], references: [id])
  eventTypeId Int?
  days        Int[]
  startTime   DateTime
  endTime     DateTime
  date        DateTime?

  @@index([userId])
  @@index([eventTypeId])
}

model Booking {
  id             Int           @id @default(autoincrement())
  uid            String        @unique @default(cuid())
  title          String
  description    String?
  startTime      DateTime
  endTime        DateTime
  location       String?
  status         BookingStatus @default(PENDING)
  rejectedReason String?
  rescheduled    Boolean?
  fromReschedule String?
  metadata       Json
  userId         String?
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventTypeId    Int?
  eventType      EventType?    @relation(fields: [eventTypeId], references: [id])
  attendees      Attendee[]
  payments       Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventTypeId])
  @@index([userId])
  @@index([uid])
  @@index([status])
}

model Attendee {
  id        Int      @id @default(autoincrement())
  email     String
  name      String
  timeZone  String
  locale    String?  @default("fa")
  booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId Int?

  @@index([email])
  @@index([bookingId])
}

model Payment {
  id        Int      @id @default(autoincrement())
  uid       String   @unique @default(cuid())
  bookingId Int?
  booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  amount    String
  fee       String
  success   Boolean  @default(false)
  refunded  Boolean  @default(false)
  metadata  Json?
  refId     String?

  @@index([bookingId])
}

model User {
  id              String         @id @default(cuid())
  username        String?
  name            String?
  email           String
  emailVerified   DateTime?
  bio             String?
  avatar          String?
  timezone        String
  weekStart       String
  locale          String?
  timeFormat      Int?
  verified        Boolean
  metadata        Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  accounts        Account[]
  session         Session[]
  ownedEventTypes EventType[]    @relation("owner")
  availability    Availability[]
  Booking         Booking[]

  @@unique([email])
  @@unique([email, username])
  @@index([emailVerified])
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           Providers
  ProviderAccountId  String
  providerId         String
  scope              String?
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, ProviderAccountId])
  @@index([userId])
  @@index([type])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionToken String   @unique
  accessToken  String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String   @id @default(cuid()) @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
